{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\n\n// Brand API functions\nexport const brandService = {\n  getAllBrands: async () => {\n    const response = await fetch(`${API_BASE_URL}/brands`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch brands');\n    }\n    return response.json();\n  },\n  getBrandById: async id => {\n    const response = await fetch(`${API_BASE_URL}/brands/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch brand');\n    }\n    return response.json();\n  },\n  createBrand: async brandData => {\n    const response = await fetch(`${API_BASE_URL}/brands`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(brandData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create brand');\n    }\n    return response.json();\n  }\n};\n\n// Car API functions\nexport const carService = {\n  getAllCars: async () => {\n    const response = await fetch(`${API_BASE_URL}/cars`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch cars');\n    }\n    return response.json();\n  },\n  getCarById: async id => {\n    const response = await fetch(`${API_BASE_URL}/cars/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch car');\n    }\n    return response.json();\n  },\n  getCarsByBrandId: async brandId => {\n    const response = await fetch(`${API_BASE_URL}/cars/brand/${brandId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch cars by brand');\n    }\n    return response.json();\n  },\n  searchCars: async model => {\n    const response = await fetch(`${API_BASE_URL}/cars/search?model=${encodeURIComponent(model)}`);\n    if (!response.ok) {\n      throw new Error('Failed to search cars');\n    }\n    return response.json();\n  },\n  filterCars: async filters => {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        params.append(key, value);\n      }\n    });\n    const response = await fetch(`${API_BASE_URL}/cars/filter?${params}`);\n    if (!response.ok) {\n      throw new Error('Failed to filter cars');\n    }\n    return response.json();\n  },\n  createCar: async carData => {\n    const response = await fetch(`${API_BASE_URL}/cars`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(carData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create car');\n    }\n    return response.json();\n  },\n  updateCar: async (id, carData) => {\n    const response = await fetch(`${API_BASE_URL}/cars/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(carData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update car');\n    }\n    return response.json();\n  },\n  deleteCar: async id => {\n    const response = await fetch(`${API_BASE_URL}/cars/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete car');\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","brandService","getAllBrands","response","fetch","ok","Error","json","getBrandById","id","createBrand","brandData","method","headers","body","JSON","stringify","carService","getAllCars","getCarById","getCarsByBrandId","brandId","searchCars","model","encodeURIComponent","filterCars","filters","params","URLSearchParams","Object","entries","forEach","key","value","undefined","append","createCar","carData","updateCar","deleteCar"],"sources":["/Users/kimjeongbeom/Luxury-Car/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\n\n// Brand API functions\nexport const brandService = {\n  getAllBrands: async () => {\n    const response = await fetch(`${API_BASE_URL}/brands`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch brands');\n    }\n    return response.json();\n  },\n\n  getBrandById: async (id) => {\n    const response = await fetch(`${API_BASE_URL}/brands/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch brand');\n    }\n    return response.json();\n  },\n\n  createBrand: async (brandData) => {\n    const response = await fetch(`${API_BASE_URL}/brands`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(brandData),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create brand');\n    }\n    return response.json();\n  }\n};\n\n// Car API functions\nexport const carService = {\n  getAllCars: async () => {\n    const response = await fetch(`${API_BASE_URL}/cars`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch cars');\n    }\n    return response.json();\n  },\n\n  getCarById: async (id) => {\n    const response = await fetch(`${API_BASE_URL}/cars/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch car');\n    }\n    return response.json();\n  },\n\n  getCarsByBrandId: async (brandId) => {\n    const response = await fetch(`${API_BASE_URL}/cars/brand/${brandId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch cars by brand');\n    }\n    return response.json();\n  },\n\n  searchCars: async (model) => {\n    const response = await fetch(`${API_BASE_URL}/cars/search?model=${encodeURIComponent(model)}`);\n    if (!response.ok) {\n      throw new Error('Failed to search cars');\n    }\n    return response.json();\n  },\n\n  filterCars: async (filters) => {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        params.append(key, value);\n      }\n    });\n\n    const response = await fetch(`${API_BASE_URL}/cars/filter?${params}`);\n    if (!response.ok) {\n      throw new Error('Failed to filter cars');\n    }\n    return response.json();\n  },\n\n  createCar: async (carData) => {\n    const response = await fetch(`${API_BASE_URL}/cars`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(carData),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create car');\n    }\n    return response.json();\n  },\n\n  updateCar: async (id, carData) => {\n    const response = await fetch(`${API_BASE_URL}/cars/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(carData),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update car');\n    }\n    return response.json();\n  },\n\n  deleteCar: async (id) => {\n    const response = await fetch(`${API_BASE_URL}/cars/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete car');\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}